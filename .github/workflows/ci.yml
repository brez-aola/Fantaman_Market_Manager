name: CI - consolidated

"on":
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  tests:
    name: Unit tests (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run pytest
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
        run: |
          if [ -f pytest.ini ] || [ -d tests ]; then pytest -q; else echo "No tests found"; fi

  lint:
    name: Lint & static checks
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dev tools
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit ruff black isort mypy flake8 bandit || true

      - name: Run pre-commit
        run: |
          pre-commit run --all-files || true

      - name: Ruff (linter)
        run: ruff check . || true

      - name: Black check
        run: black --check . || true

      - name: isort check
        run: isort --check-only . || true

      - name: flake8
        run: flake8 app scripts tests --max-line-length=100 --exclude=.venv || true

      - name: bandit
        run: bandit -r app scripts tests -lll || true

  stable-tests:
    name: Stable server integration (smoke)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install gunicorn
        run: pip install gunicorn

      - name: Start stable server (gunicorn)
        run: |
          gunicorn "app:create_app()" -w 1 -b 127.0.0.1:5000 --log-file flask_server.log --daemon
          sleep 2

      - name: Run docs + rate-limit smoke test
        run: python3 test_api_docs_and_rate_limiting.py

      - name: Run security test suite
        run: python3 test_api_security.py

      - name: Upload server log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flask_server.log
          path: flask_server.log

  integration:
    name: Integration (Postgres)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: giocatori
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 && break || sleep 1
          done

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements-dev.txt || true

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/giocatori
        run: |
          pytest -q tests/test_integration_postgres.py || true
